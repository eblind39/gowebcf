// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package architecture is a generated GoMock package.
package architecture

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccesor is a mock of Accesor interface.
type MockAccesor struct {
	ctrl     *gomock.Controller
	recorder *MockAccesorMockRecorder
}

// MockAccesorMockRecorder is the mock recorder for MockAccesor.
type MockAccesorMockRecorder struct {
	mock *MockAccesor
}

// NewMockAccesor creates a new mock instance.
func NewMockAccesor(ctrl *gomock.Controller) *MockAccesor {
	mock := &MockAccesor{ctrl: ctrl}
	mock.recorder = &MockAccesorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccesor) EXPECT() *MockAccesorMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockAccesor) Retrieve(n int) Persona {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", n)
	ret0, _ := ret[0].(Persona)
	return ret0
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockAccesorMockRecorder) Retrieve(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockAccesor)(nil).Retrieve), n)
}

// Save mocks base method.
func (m *MockAccesor) Save(n int, p Persona) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", n, p)
}

// Save indicates an expected call of Save.
func (mr *MockAccesorMockRecorder) Save(n, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccesor)(nil).Save), n, p)
}
